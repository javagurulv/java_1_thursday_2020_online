Для чего применяются объекты этого класса?
В JDK 8 был введён новый утилитарный класс java.util.Optional, целями которого являются повышение
null-safety и читаемости кода при работе со ссылками, значения которых могут быть null. Главная же цель
Optional — замена null-значений, благодаря чему должна повышаться безопасность и читаемость кода.

Какие два состояния могут быть у объектов этого класса?
Первое состояние когда объект Optional содержит значение (not null).
Второе состояние когда у объекта Optional значение отсутствует (null).

Как создаются экземпляры данного класса?
Объект типа Optional может быть создан тремя методами:
Optional.of — для создания Optional из не-null значения. При передаче в качестве аргумента null будет
выкинуто исключение NullPointerException.
Optional.ofNullable — для создания Optional из значения, которое может быть null. Если значение не null, т
о будет создан Optional со значением, иначе — пустой Optional.
Optional.empty — для создания пустого Optional.

Как можно проверить в каком состоянии находится экземпляр данного класса?
Единственным до JDK 11 методом проверки наличия значения был isPresent, который возвращает true,
если объект Optional содержит значение, иначе — false.
В JDK 11 был добавлен метод-антипод isEmpty, возвращающий true, если значение отсутствует.

Как можно получить объект, который находится внутри Optional?
Метод get — простейший способ получения значения объекта Optional. Если Optional непустой, то он вернёт
значение, иначе выбросит исключение NoSuchElementException. Поэтому при обращении к этому методу нужно либо
проверять наличие значения при помощи Optional.isPresent(), либо использовать try/catch.

