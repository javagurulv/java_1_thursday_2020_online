package student_vadim_sokolenko.Lesson3;

class Lesson3day2task10 {

    //1.Memory allotment of String
    //Whenever a String Object is created,
    // two objects will be created- one in the Heap
    // Area and one in the String constant pool and the
    // String object reference always points to heap area object.

    //2.Длина строки
    //Методы, используемые для получения информации об объекте,
    // известны как методы доступа. Один из методов доступа,
    // который можно использовать со строками является метод length(),
    // он возвращает количество символов, содержащихся в строковом объекте.
    //
    //Ниже представлен пример метода length(), который поможет определить длину строки.
    //
    //Пример
    //class Test {
    //
    //   public static void main(String args[]) {
    //      String s = "Я стану отличным программистом!";
    //      int len = s.length();
    //
    //      System.out.println( "Длина строки: " + len + " символ.");
    //   }
    //}
    //Получим следующий результат:
    //
    //Длина строки: 31 символ.



    //3.сравнение строк
    //Класс String включает несколько методов,
    // посредством которых можно сравнить полные строки и части строк.
    // Некоторые методы возвращают целочисленные значения,
    // а другие – логические значения.
    // В этой статье приводятся способы сравнения двух разных строк,
    // используя различные методы класса String.

    //3.1
    // Сравнение строк с помощью equals()
    //Метод equals() — сравнивает строку с указанным объектом.
    // Результат является истинным тогда и только тогда,
    // когда аргумент не является нулевым и является строковым объектом,
    // который представляет ту же последовательность символов, что и этот объект.
    //
    //class Compare{
    //   public static void main(String []args){
    //      String str1 = "proglang";
    //      String str2 = "proglang";
    //      String str3 = new String ("Prog Lang");
    //
    //      System.out.println(str1.equals(str2));
    //      System.out.println(str2.equals(str3));
    //   }
    //}
    //Получим следующий результат:
    //
    //true
    //false

    // 3.2
    // Сравнение строк с помощью оператора ==
    //(сравнивает в памяти)
    //class Compare{
    //   public static void main(String []args){
    //      String str1 = "proglang";
    //      String str2 = "proglang";
    //      String str3 = new String ("Prog Lang");
    //
    //      System.out.println(str1 == str2);
    //      System.out.println(str2 == str3);
    //   }
    //}
    //Получим следующий результат:
    //
    //true
    //false

    //3.3
    // Создайте два объекта класса String.
    // Самый простой способ объявить две строки в Java – это использовать следующий код.
    // String объявляет тип объекта. string1 и string2 – это имена строк.
    // Слова «привет» и «отец» являются значениями строковых объектов.
    // Всякий раз, когда компилятор обнаруживает значение, заключенное в кавычки,
    // он автоматически создает строку.
    //String string1 = "привет";
    //String string2 = "отец";

    //3.4
    // Используйте логический метод startsWith(String prefix),
    // чтобы сравнить начало строки.
    // Этот метод класса String сравнивает начало строки с указанным префиксом (prefix).
    // Это логический метод, поэтому он возвращает только два значения: true (истина) или false (ложь).
    // Используйте следующий код и одну из созданных строк.
    // Представленный код возвратит оба значения (true и false) и выведет результаты на экран.
    // Сначала возвратится значение true, а затем значение false.
    //System.out.println(string1.startsWith("пр")); //возвращает true и выводит true
    //System.out.println(string1.startsWith("ма"));  //возвращает false и выводит false

    //3.5
    // Используйте логический метод startsWith(String prefix, int offset).
    // Этот метод класса String проверяет, входит ли указанный префикс (prefix) в строку,
    // начиная с заданного индекса (offset). Данный метод игнорирует буквы,
    // которые находятся до заданного индекса. Представленный код возвратит оба значения (true и false).
    // Обратите внимание, что подсчет букв в строке начинается с 0.
    // Например, в слове «привет» буква «п» – это 0, буква «р» – это 1.
    //System.out.println(string1.startsWith("ве", 3)); //возвращает true и выводит true
    //System.out.println(string1.startsWith("ве", 1)); //возвращает false и выводит false

    // string pool
    // https://www.edureka.co/blog/java-string-pool/

    //Если своими словами,
    // то стринг пул это место
    // где хранятся все ранее использованые и
    // заимплементированные String. Это необходимо для разгрузки и ускорения JVM
    // компиляции и уменьшения использования памяти комп-а.
    // Каждый раз создавая переменную STRING JVM проверяет
    // String pool, и если переменная string с этим параметром уже создавалась,
    // то он берет значение от туда.
    //
}
