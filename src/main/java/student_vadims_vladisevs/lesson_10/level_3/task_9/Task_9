java.util.Optional - целями класса являются повышение null-safety и читаемости кода при работе со ссылками, значения которых могут быть null.
Главная же цель Optional — замена null-значений, благодаря чему должна повышаться безопасность и читаемость кода.

Может быть два состояния - ссылка на обьект или null.

Объект типа Optional может быть создан тремя методами:

Optional.of — для создания Optional из не-null значения. При передаче в качестве аргумента null будет выкинуто исключение NullPointerException.
Optional.ofNullable — для создания Optional из значения, которое может быть null. Если значение не null, то будет создан Optional со значением, иначе — пустой Optional.
Optional.empty — для создания пустого Optional.

Методы получения значения
Для получения значения из Optional существует несколько методов, некоторые из которых предусматривают получение значений по умолчанию,
если Optional не содержит никакого значения.

get()
Метод get — простейший способ получения значения объекта Optional.
Если Optional непустой, то он вернёт значение, иначе выбросит исключение NoSuchElementException.
Поэтому при обращении к этому методу нужно либо проверять наличие значения при помощи Optional.isPresent(), либо использовать try/catch.

orElse()
Метод orElse возвращает значение объекта Optional или значение, переданное ему в качестве аргумента, которое может быть null.

orElseGet()
Метод orElseGet, в отличии от orElse принимает в качестве аргумента объект класса java.util.function.Supplier,
который вернёт «запасное» значение, если объект Optional пустой.
Таким образом, в отличии от метода orElse, метод orElseGet создаёт «запасное» значение только по необходимости, что немного правильнее с точки зрения использования ресурсов,
особенно, когда получение значения умолчанию требует выполнения каких-либо блокирующих операций, например, обращения к базе данных.

orElseThrow()
Метод orElseThrow возвращает значение объекта Optional или выбрасывает исключение,
возвращаемое объектом типа java.util.function.Supplier переданным ему в качестве аргумента.
В JDK 10 был добавлен orElseThrow без аргументов, выбрасывающий NoSuchElementException.

ifPresent()
Метод ifPresent принимает в качестве аргумента объект типа java.util.function.Consumer,
метод accept которого принимает текущее значение объекта Optional в качестве аргумента.
Метод accept будет вызван только в том случае, если Optional содержит значение.

ifPresentOrElse()
Метод ifPresentOrElse аналогичен методу ifPresent, он был добавлен в JDK 9 и в качестве второго аргумента принимает объект типа java.lang.Runnable,
метод run которого будет вызван, если объект Optional не содержит значения.

