Задумывались ли вы над тем, что делают ИТ программы?

Приведите свои примеры.

Например, ИТ программы помогают управлять воздушным трафиком,
контролируют финансовые потоки (транзакции), управляют умными
светофорами на улицах.

Давайте разберём пример с программой управления умным светофором.

Как она работает?

В составе этой системы есть камеры, через которые система получает
изображение части дороги. После получения информации (входных данных)
от камер (внешние источники) система анализирует полученное изображение,
распознаёт транспортные средства и воссоздаёт дорожную ситуацию на
перекрёстке у себя в памяти (в памяти программы/компьютера). Это
пример преобразования (трансформации) данных из одного представления
в другое. В данном случае это делается для того, чтобы в дальнейшем
было удобнее анализировать эти данные.

После воссоздания дорожной ситуации в своей памяти (в определённом
формате), система запускает процесс анализа сложившейся дорожной
ситуации на перекрёстке. Этот процесс описывается алгоритмом (чёткой
последовательностью дейсвий совершаемых программой).

Результатом работы алгоритма по анализу дорожной ситуации на
перекрёстке является решение о том в какое положение надо переключить
светофор в данный момент времени. Это решение и есть конечный
результат работы компьютерной программы.

После получения решения в какое положение надо переключить светофор
система переключает светофор в нужное положение передавая команды
самому светофору.

Проанализировав систему управления умным светофором можно заметить,
что самым важным для её работы являются входные данные получаемые от
камер в виде изображения (картинки). Если данные не будут поступать,
то системе нечего будет обрабатывать и она не сможет эффективно
управлять движением на перекрёстке. Все, что она сможет делать без
данных о текущем состоянии дорожного движения на перекрёстке это
переключать светофор в другое положение через равные отрезки времени.
В таком случае умный светофор ничем не будет отличаться от светофора
без "мозгов" (компьютерной программы).

Пример с системой умного светофора показывает, что данные являются
ключевым элементом в компьютерных системах. Без данных компьютерные
системы будут просто бесполезны. Они не смогут выполнять свои задачи.
Именно поэтому разработку компьютерных систем начинают с анализа и
создания модели данных с которой будет работать компьютерная система.

Что такое модель данных компьютерной системы?

Например для системы умного светофора модель данных может выглядеть так:
цветное изображение (картинка) 100 на 100 пикселей в системе RGB.
Пикселем в ИТ называют одну ячейку изображения (более подробно про
то что такое пиксель можно прочитать более подробно тут:
https://ru.wikipedia.org/wiki/%D0%9F%D0%B8%D0%BA%D1%81%D0%B5%D0%BB%D1%8C)

В системе RGB каждый пиксель описывается тремя числами от 0 до 255 каждое.
Например: R - 10, G - 177, B - 250. Более подробно про систему RGB
можно прочитать тут: https://ru.wikipedia.org/wiki/RGB.

Исходя из приведённого выше анализа и описания мы можем разработать
чёткую модель данных, которая будет учитывать требования, формат и способ
представления данных в компьютерной программе.

Очевидно, что изображение 100 на 100 пикселей легко представить в виде
двумерного массива. Единственная проблема состоит в том, что каждый
пиксель это не просто одно число, а целых три числа в системе RGB
(каждое число это число в диапазоне от 0 до 255). Три числа в одну
ячейку массива не положишь.

Перед тем как читать дальше, подумайте как бы вы решили эту задачу?
Как бы вы представили изображение в системе RGB 100 на 100 пикселей
в компьютерной программе?

Для решения этой задачи можно воспользоваться принципами ООП
(объектно ориентированного программирования). Можно создать класс
Pixel, который будет описывать один пиксель в изображении:

class Pixel {

    private int red;
    private int green;
    private int blue;

    Pixel(int red, int green, int blue) {
        this.red = red;
        this.green = green;
        this.blue = blue;
    }

    int getRed() {return this.red;}
    int getGreen() {return this.green;}
    int getBlue() {return this.blue;}

}

setX() методы в нашем случае будут не нужны, так как после создания
изображения (которое состоит из матрицы пикселей) программа умного
светофора не будет менять изображение, а значит и не будет менять
значения у конкретных экземпляров класса Pixel. Поэтому setX()
методы в нашей модели не нужны. В компьютерных программах лучше
не создавать лишние элементы (те которые не нужны в данный момент),
они в коде будут только мешать.

Создав класс Pixel мы можем чётко описать изображение получаемое
системой умного светофора с камер:
    Pixel[][] picture = new Pixel[100][100];
- изображение это двумерный массив в каждой ячейке которого лежит
объект класса Pixel. Это и есть детально проработанная модель данных
получаемая системой умного светофора от камер. В этой модели чётко
описан формат и представление изображения. На основе данной модели
можно строить дальнейшую обработку данных и их анализ, тоесть
разрабатывать внутренние алгоритмы программы.

Без чёткой и конкретной модели данных тяжело разрабатывать приложение,
сложно писать код, так как не понятно какие данные и в каков формате/виде
будут поступать на вход приложению или его части, и что эта часть
приложения должна выдавать в качестве результата. Если у вас нет чётко
проработанной модели данных для приложения, то начинать писать код
не имеет большого смысла. Начните с анализа предметной области вашего
приложения и разработки модели данных.

Что такое анализ предметной области для приложения?

Анализ предметной области для приложения это в первую очередь чёткое
понимание всех бизнес процессов, что каждый из них делает и зачем,
какова их цель и какую ценность они представляют для бизнеса. Нужно
понять, с какой целью бизнес хочет автоматизировать тот или иной
бизнес процесс по средством компьютерной программы. Что это даст
бизнесу, как автоматизация конкретного бизнес процесса повлияет
на другие бизнес процессы?

Модель данных нужно придумать/разработать/создать как для тех данных,
которые будут поступать в программу из вне (тоесть для входных данных),
так и для представления данных внутри самой программы.
